
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 29 19:00:28 CET 2012
//----------------------------------------------------

package MyGCC;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 29 19:00:28 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\005" +
    "\000\002\004\007\000\002\004\010\000\002\004\003\000" +
    "\002\005\007\000\002\006\003\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\005\000\002\011\003\000\002\011\004\000\002\012\006" +
    "\000\002\013\007\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\005\000\002\016\004\000\002" +
    "\016\007\000\002\017\004\000\002\020\005\000\002\020" +
    "\002\000\002\021\005\000\002\021\010\000\002\021\006" +
    "\000\002\021\004\000\002\021\003\000\002\021\006\000" +
    "\002\021\011\000\002\021\007\000\002\021\007\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\004\000\002\022\004\000\002\022\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\006\000\002\022\006\000" +
    "\002\023\003\000\002\023\002\000\002\024\003\000\002" +
    "\024\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\010\004\013\005\011\007\005\001\002\000" +
    "\004\002\200\001\002\000\004\004\173\001\002\000\004" +
    "\017\ufff9\001\002\000\004\006\162\001\002\000\006\004" +
    "\025\005\011\001\002\000\004\006\ufff7\001\002\000\004" +
    "\017\020\001\002\000\004\006\014\001\002\000\006\010" +
    "\015\017\ufffd\001\002\000\004\045\016\001\002\000\004" +
    "\011\017\001\002\000\004\017\ufffb\001\002\000\040\004" +
    "\013\005\011\006\ufffe\007\005\012\ufffe\014\ufffe\015\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\045\ufffe\001\002\000\036\004\uffff\005\uffff\006\uffff" +
    "\012\uffff\014\uffff\015\uffff\021\uffff\022\uffff\023\uffff\024" +
    "\uffff\026\uffff\027\uffff\030\uffff\045\uffff\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufff1\004\025\005\011\001" +
    "\002\000\004\006\143\001\002\000\004\006\ufff6\001\002" +
    "\000\004\014\027\001\002\000\040\004\013\005\011\006" +
    "\ufffe\007\005\012\ufffe\014\ufffe\015\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\026\ufffe\027\ufffe\030\ufffe\045\ufffe\001" +
    "\002\000\004\015\142\001\002\000\032\006\036\012\047" +
    "\014\046\015\uffe5\021\035\022\045\023\044\024\040\026" +
    "\034\027\033\030\043\045\041\001\002\000\004\017\140" +
    "\001\002\000\014\006\050\012\047\027\033\030\043\045" +
    "\041\001\002\000\004\012\133\001\002\000\004\012\130" +
    "\001\002\000\046\010\121\012\073\017\uffd5\020\122\025" +
    "\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\001\002\000\004\015\uffe7\001\002\000\004\012\113" +
    "\001\002\000\046\011\uffd4\013\uffd4\016\uffd4\017\uffd4\025" +
    "\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\001\002\000\040\017\uffda\025\uffda\027\053\031\062" +
    "\032\060\033\067\034\063\035\056\036\065\037\057\040" +
    "\066\041\061\042\054\043\070\044\052\001\002\000\014" +
    "\006\050\012\047\027\033\030\043\045\041\001\002\000" +
    "\004\012\107\001\002\000\020\006\050\012\047\017\uffe0" +
    "\025\uffe0\027\033\030\043\045\041\001\002\000\032\006" +
    "\036\012\047\014\046\015\uffe5\021\035\022\045\023\044" +
    "\024\040\026\034\027\033\030\043\045\041\001\002\000" +
    "\014\006\050\012\047\027\033\030\043\045\041\001\002" +
    "\000\052\010\072\011\uffd5\012\073\013\uffd5\016\uffd5\017" +
    "\uffd5\025\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\001\002\000\036\013\064\027\053\031\062" +
    "\032\060\033\067\034\063\035\056\036\065\037\057\040" +
    "\066\041\061\042\054\043\070\044\052\001\002\000\014" +
    "\006\uffc1\012\uffc1\027\uffc1\030\uffc1\045\uffc1\001\002\000" +
    "\014\006\uffc6\012\uffc6\027\uffc6\030\uffc6\045\uffc6\001\002" +
    "\000\014\006\uffc3\012\uffc3\027\uffc3\030\uffc3\045\uffc3\001" +
    "\002\000\014\006\050\012\047\027\033\030\043\045\041" +
    "\001\002\000\014\006\uffc9\012\uffc9\027\uffc9\030\uffc9\045" +
    "\uffc9\001\002\000\014\006\uffc7\012\uffc7\027\uffc7\030\uffc7" +
    "\045\uffc7\001\002\000\014\006\uffcc\012\uffcc\027\uffcc\030" +
    "\uffcc\045\uffcc\001\002\000\014\006\uffc4\012\uffc4\027\uffc4" +
    "\030\uffc4\045\uffc4\001\002\000\014\006\uffcd\012\uffcd\027" +
    "\uffcd\030\uffcd\045\uffcd\001\002\000\014\006\uffca\012\uffca" +
    "\027\uffca\030\uffca\045\uffca\001\002\000\046\011\uffd6\013" +
    "\uffd6\016\uffd6\017\uffd6\025\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002\000\014\006\uffc8" +
    "\012\uffc8\027\uffc8\030\uffc8\045\uffc8\001\002\000\014\006" +
    "\uffc5\012\uffc5\027\uffc5\030\uffc5\045\uffc5\001\002\000\014" +
    "\006\uffcb\012\uffcb\027\uffcb\030\uffcb\045\uffcb\001\002\000" +
    "\014\006\uffc2\012\uffc2\027\uffc2\030\uffc2\045\uffc2\001\002" +
    "\000\046\011\uffd9\013\uffd9\016\uffd9\017\uffd9\025\uffd9\027" +
    "\053\031\062\032\060\033\067\034\063\035\056\036\065" +
    "\037\057\040\066\041\061\042\054\043\070\044\052\001" +
    "\002\000\014\006\050\012\047\027\033\030\043\045\041" +
    "\001\002\000\016\006\050\012\047\013\uffd0\027\033\030" +
    "\043\045\041\001\002\000\004\013\101\001\002\000\004" +
    "\013\uffd1\001\002\000\040\013\uffcf\016\077\027\053\031" +
    "\062\032\060\033\067\034\063\035\056\036\065\037\057" +
    "\040\066\041\061\042\054\043\070\044\052\001\002\000" +
    "\014\006\050\012\047\027\033\030\043\045\041\001\002" +
    "\000\004\013\uffce\001\002\000\046\011\uffd3\013\uffd3\016" +
    "\uffd3\017\uffd3\025\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\001\002\000\036\011\103\027\053" +
    "\031\062\032\060\033\067\034\063\035\056\036\065\037" +
    "\057\040\066\041\061\042\054\043\070\044\052\001\002" +
    "\000\046\011\uffd2\013\uffd2\016\uffd2\017\uffd2\025\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\001" +
    "\002\000\004\015\105\001\002\000\006\017\uffdb\025\uffdb" +
    "\001\002\000\040\017\uffe1\025\uffe1\027\053\031\062\032" +
    "\060\033\067\034\063\035\056\036\065\037\057\040\066" +
    "\041\061\042\054\043\070\044\052\001\002\000\004\006" +
    "\110\001\002\000\004\013\111\001\002\000\006\017\uffdf" +
    "\025\uffdf\001\002\000\046\011\uffd7\013\uffd7\016\uffd7\017" +
    "\uffd7\025\uffd7\027\053\031\062\032\060\033\067\034\063" +
    "\035\056\036\065\037\057\040\066\041\061\042\054\043" +
    "\070\044\052\001\002\000\014\006\050\012\047\027\033" +
    "\030\043\045\041\001\002\000\036\013\115\027\053\031" +
    "\062\032\060\033\067\034\063\035\056\036\065\037\057" +
    "\040\066\041\061\042\054\043\070\044\052\001\002\000" +
    "\030\006\036\012\047\014\046\021\035\022\045\023\044" +
    "\024\040\026\034\027\033\030\043\045\041\001\002\000" +
    "\006\017\uffdd\025\117\001\002\000\030\006\036\012\047" +
    "\014\046\021\035\022\045\023\044\024\040\026\034\027" +
    "\033\030\043\045\041\001\002\000\006\017\uffde\025\uffde" +
    "\001\002\000\014\006\050\012\047\027\033\030\043\045" +
    "\041\001\002\000\014\006\050\012\047\027\033\030\043" +
    "\045\041\001\002\000\040\017\uffe4\025\uffe4\027\053\031" +
    "\062\032\060\033\067\034\063\035\056\036\065\037\057" +
    "\040\066\041\061\042\054\043\070\044\052\001\002\000" +
    "\036\011\125\027\053\031\062\032\060\033\067\034\063" +
    "\035\056\036\065\037\057\040\066\041\061\042\054\043" +
    "\070\044\052\001\002\000\042\017\uffd2\020\126\025\uffd2" +
    "\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\001\002\000\014\006\050\012\047\027\033\030\043\045" +
    "\041\001\002\000\040\017\uffe3\025\uffe3\027\053\031\062" +
    "\032\060\033\067\034\063\035\056\036\065\037\057\040" +
    "\066\041\061\042\054\043\070\044\052\001\002\000\004" +
    "\045\131\001\002\000\004\013\132\001\002\000\006\017" +
    "\uffe2\025\uffe2\001\002\000\014\006\050\012\047\027\033" +
    "\030\043\045\041\001\002\000\036\013\135\027\053\031" +
    "\062\032\060\033\067\034\063\035\056\036\065\037\057" +
    "\040\066\041\061\042\054\043\070\044\052\001\002\000" +
    "\030\006\036\012\047\014\046\021\035\022\045\023\044" +
    "\024\040\026\034\027\033\030\043\045\041\001\002\000" +
    "\006\017\uffdc\025\uffdc\001\002\000\046\011\uffd8\013\uffd8" +
    "\016\uffd8\017\uffd8\025\uffd8\027\053\031\062\032\060\033" +
    "\067\034\063\035\056\036\065\037\057\040\066\041\061" +
    "\042\054\043\070\044\052\001\002\000\032\006\036\012" +
    "\047\014\046\015\uffe5\021\035\022\045\023\044\024\040" +
    "\026\034\027\033\030\043\045\041\001\002\000\004\015" +
    "\uffe6\001\002\000\010\002\uffef\004\uffef\005\uffef\001\002" +
    "\000\004\012\144\001\002\000\006\004\151\005\147\001" +
    "\002\000\004\013\uffec\001\002\000\004\013\160\001\002" +
    "\000\004\013\uffed\001\002\000\006\013\uffeb\016\156\001" +
    "\002\000\004\006\152\001\002\000\010\010\153\013\uffe9" +
    "\016\uffe9\001\002\000\004\045\154\001\002\000\004\011" +
    "\155\001\002\000\006\013\uffe8\016\uffe8\001\002\000\004" +
    "\004\151\001\002\000\004\013\uffea\001\002\000\004\014" +
    "\uffee\001\002\000\004\002\ufff0\001\002\000\004\012\163" +
    "\001\002\000\006\004\167\005\166\001\002\000\004\013" +
    "\172\001\002\000\004\013\ufff4\001\002\000\004\013\ufff5" +
    "\001\002\000\006\013\ufff3\016\170\001\002\000\004\004" +
    "\167\001\002\000\004\013\ufff2\001\002\000\004\017\ufff8" +
    "\001\002\000\004\006\174\001\002\000\006\010\175\017" +
    "\ufffc\001\002\000\004\045\176\001\002\000\004\011\177" +
    "\001\002\000\004\017\ufffa\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\014\002\003\003\007\004\011\005\005\006" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\023\011\021\012" +
    "\022\013\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\020\004\011" +
    "\005\005\006\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\023\011\160\012\022\013\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\030\004\011\005\005\006\006\017\027\001\001" +
    "\000\002\001\001\000\010\020\036\021\031\022\041\001" +
    "\001\000\002\001\001\000\004\022\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\054" +
    "\001\001\000\004\022\111\001\001\000\002\001\001\000" +
    "\004\022\105\001\001\000\010\020\103\021\031\022\041" +
    "\001\001\000\004\022\050\001\001\000\002\001\001\000" +
    "\004\025\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\054\001\001\000\004\022\101\001" +
    "\001\000\010\022\075\023\073\024\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\054\001\001\000" +
    "\006\022\075\024\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\054\001\001\000\004\022\113\001\001\000\004" +
    "\025\054\001\001\000\006\021\115\022\041\001\001\000" +
    "\002\001\001\000\006\021\117\022\041\001\001\000\002" +
    "\001\001\000\004\022\123\001\001\000\004\022\122\001" +
    "\001\000\004\025\054\001\001\000\004\025\054\001\001" +
    "\000\002\001\001\000\004\022\126\001\001\000\004\025" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\133\001\001\000\004\025\054\001" +
    "\001\000\006\021\135\022\041\001\001\000\002\001\001" +
    "\000\004\025\054\001\001\000\010\020\140\021\031\022" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\145\015\144\016\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\156" +
    "\016\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\163\010\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new Parser(new Scanner(System.in,sf),sf).parse();
		else new Parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bin_op ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bin_op ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bin_op ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bin_op ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bin_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bin_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bin_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bin_op ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bin_op ::= MEQL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bin_op ::= LEQL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bin_op ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bin_op ::= MORE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bin_op ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // args_list ::= expression COMMA args_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // args_list ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arg_sequence ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_sequence",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arg_sequence ::= args_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_sequence",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= IDENT LHOOK expression RHOOK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= IDENT LPAREN arg_sequence RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= NB_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression bin_op expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruction ::= LBRACKET instruct_list RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruction ::= WHILE LPAREN expression RPAREN instruction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= IF LPAREN expression RPAREN instruction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruction ::= IF LPAREN expression RPAREN instruction ELSE instruction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruction ::= READ_INT LPAREN IDENT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruction ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruction ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= EXIT LPAREN NB_INT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= IDENT LHOOK expression RHOOK EQL expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= IDENT EQL expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruct_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruct_list ::= instruction SEMI instruct_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // body ::= declarations_list instruct_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameter ::= INT IDENT LHOOK NB_INT RHOOK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameter ::= INT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param_list ::= parameter COMMA param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param_list ::= parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param_sequence ::= param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sequence",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_sequence ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sequence",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // header ::= type IDENT LPAREN param_sequence RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= header LBRACKET body RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functions_list ::= function functions_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functions_list ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // types_list ::= INT COMMA types_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // types_list ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types_sequence ::= types_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_sequence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // types_sequence ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_sequence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prototype ::= type IDENT LPAREN types_sequence RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= prototype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= STATIC INT IDENT LHOOK NB_INT RHOOK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= INT IDENT LHOOK NB_INT RHOOK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= STATIC INT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= INT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations_list ::= declaration SEMI declarations_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations_list functions_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

