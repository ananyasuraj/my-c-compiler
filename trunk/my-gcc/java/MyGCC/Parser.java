
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 19 17:02:15 CET 2012
//----------------------------------------------------

package MyGCC;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 19 17:02:15 CET 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\003\000\002\002\004\000\002\024" +
    "\010\000\002\035\002\000\002\024\006\000\002\024\005" +
    "\000\002\025\005\000\002\025\003\000\002\031\005\000" +
    "\002\031\002\000\002\026\004\000\002\036\002\000\002" +
    "\027\007\000\002\027\010\000\002\027\005\000\002\030" +
    "\004\000\002\030\006\000\002\003\005\000\002\003\002" +
    "\000\002\004\005\000\002\004\006\000\002\004\005\000" +
    "\002\032\003\000\002\032\003\000\002\005\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\005\000\002\011\004\000\002\011\002" +
    "\000\002\012\006\000\002\013\007\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\005\000\002" +
    "\016\004\000\002\016\007\000\002\017\004\000\002\020" +
    "\005\000\002\020\002\000\002\021\005\000\002\021\010" +
    "\000\002\021\006\000\002\021\004\000\002\021\003\000" +
    "\002\021\006\000\002\021\011\000\002\021\007\000\002" +
    "\021\007\000\002\021\005\000\002\021\003\000\002\034" +
    "\005\000\002\034\004\000\002\034\004\000\002\034\005" +
    "\000\002\034\003\000\002\034\003\000\002\034\006\000" +
    "\002\034\006\000\002\022\003\000\002\022\002\000\002" +
    "\023\003\000\002\023\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\010\004\011\005\010\006\005\001\002\000" +
    "\004\002\247\001\002\000\004\004\011\001\002\000\004" +
    "\002\001\001\002\000\004\044\233\001\002\000\004\044" +
    "\012\001\002\000\010\012\uffe8\015\uffe8\044\uffe8\001\002" +
    "\000\004\011\014\001\002\000\004\002\ufffc\001\002\000" +
    "\006\004\022\005\021\001\002\000\004\012\226\001\002" +
    "\000\004\002\ufff7\001\002\000\004\012\222\001\002\000" +
    "\006\012\uffe5\015\220\001\002\000\004\012\033\001\002" +
    "\000\010\012\uffe8\015\uffe8\044\027\001\002\000\006\012" +
    "\uffdd\015\024\001\002\000\004\004\026\001\002\000\004" +
    "\012\uffdc\001\002\000\004\044\027\001\002\000\010\007" +
    "\030\012\uffdb\015\uffdb\001\002\000\004\045\031\001\002" +
    "\000\004\010\032\001\002\000\006\012\uffda\015\uffda\001" +
    "\002\000\006\013\036\016\035\001\002\000\004\002\ufff3" +
    "\001\002\000\010\004\011\005\010\006\005\001\002\000" +
    "\040\004\011\005\043\006\040\011\uffef\013\uffef\014\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027" +
    "\uffef\044\uffef\045\uffef\001\002\000\004\014\200\001\002" +
    "\000\004\004\011\001\002\000\004\044\166\001\002\000" +
    "\032\011\073\013\072\014\uffd7\020\061\021\070\022\071" +
    "\023\065\025\060\026\057\027\067\044\062\045\064\001" +
    "\002\000\004\044\047\001\002\000\004\016\045\001\002" +
    "\000\040\004\011\005\043\006\040\011\uffef\013\uffef\014" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef" +
    "\027\uffef\044\uffef\045\uffef\001\002\000\032\011\ufff0\013" +
    "\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\044\ufff0\045\ufff0\001\002\000\004\011" +
    "\051\001\002\000\004\016\uffec\001\002\000\006\004\011" +
    "\005\054\001\002\000\004\012\055\001\002\000\004\012" +
    "\uffe6\001\002\000\004\012\uffe7\001\002\000\004\016\uffe9" +
    "\001\002\000\004\016\164\001\002\000\014\011\073\026" +
    "\057\027\067\044\074\045\064\001\002\000\004\011\157" +
    "\001\002\000\004\011\154\001\002\000\046\007\145\011" +
    "\117\016\uffc7\017\146\024\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000\004\014\uffd9" +
    "\001\002\000\046\010\uffc6\012\uffc6\015\uffc6\016\uffc6\024" +
    "\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\001\002\000\004\011\137\001\002\000\040\016\uffcc" +
    "\024\uffcc\026\077\030\106\031\101\032\112\033\105\034" +
    "\114\035\110\036\103\037\111\040\104\041\100\042\113" +
    "\043\076\001\002\000\014\011\073\026\057\027\067\044" +
    "\074\045\064\001\002\000\020\011\073\016\uffd2\024\uffd2" +
    "\026\057\027\067\044\074\045\064\001\002\000\004\011" +
    "\132\001\002\000\032\011\073\013\072\014\uffd7\020\061" +
    "\021\070\022\071\023\065\025\060\026\057\027\067\044" +
    "\062\045\064\001\002\000\014\011\073\026\057\027\067" +
    "\044\074\045\064\001\002\000\052\007\116\010\uffc7\011" +
    "\117\012\uffc7\015\uffc7\016\uffc7\024\uffc7\026\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000\036" +
    "\012\107\026\077\030\106\031\101\032\112\033\105\034" +
    "\114\035\110\036\103\037\111\040\104\041\100\042\113" +
    "\043\076\001\002\000\014\011\uffb3\026\uffb3\027\uffb3\044" +
    "\uffb3\045\uffb3\001\002\000\014\011\uffb8\026\uffb8\027\uffb8" +
    "\044\uffb8\045\uffb8\001\002\000\014\011\uffb5\026\uffb5\027" +
    "\uffb5\044\uffb5\045\uffb5\001\002\000\014\011\uffbe\026\uffbe" +
    "\027\uffbe\044\uffbe\045\uffbe\001\002\000\014\011\073\026" +
    "\057\027\067\044\074\045\064\001\002\000\014\011\uffb9" +
    "\026\uffb9\027\uffb9\044\uffb9\045\uffb9\001\002\000\014\011" +
    "\uffb6\026\uffb6\027\uffb6\044\uffb6\045\uffb6\001\002\000\014" +
    "\011\uffbc\026\uffbc\027\uffbc\044\uffbc\045\uffbc\001\002\000" +
    "\014\011\uffbf\026\uffbf\027\uffbf\044\uffbf\045\uffbf\001\002" +
    "\000\046\010\uffc8\012\uffc8\015\uffc8\016\uffc8\024\uffc8\026" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\001" +
    "\002\000\014\011\uffba\026\uffba\027\uffba\044\uffba\045\uffba" +
    "\001\002\000\014\011\uffb7\026\uffb7\027\uffb7\044\uffb7\045" +
    "\uffb7\001\002\000\014\011\uffbd\026\uffbd\027\uffbd\044\uffbd" +
    "\045\uffbd\001\002\000\014\011\uffb4\026\uffb4\027\uffb4\044" +
    "\uffb4\045\uffb4\001\002\000\014\011\uffbb\026\uffbb\027\uffbb" +
    "\044\uffbb\045\uffbb\001\002\000\046\010\uffcb\012\uffcb\015" +
    "\uffcb\016\uffcb\024\uffcb\026\077\030\106\031\101\032\112" +
    "\033\105\034\114\035\110\036\103\037\111\040\104\041" +
    "\100\042\113\043\076\001\002\000\014\011\073\026\057" +
    "\027\067\044\074\045\064\001\002\000\016\011\073\012" +
    "\uffc2\026\057\027\067\044\074\045\064\001\002\000\004" +
    "\012\125\001\002\000\004\012\uffc3\001\002\000\040\012" +
    "\uffc1\015\123\026\077\030\106\031\101\032\112\033\105" +
    "\034\114\035\110\036\103\037\111\040\104\041\100\042" +
    "\113\043\076\001\002\000\014\011\073\026\057\027\067" +
    "\044\074\045\064\001\002\000\004\012\uffc0\001\002\000" +
    "\046\010\uffc5\012\uffc5\015\uffc5\016\uffc5\024\uffc5\026\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002" +
    "\000\036\010\127\026\077\030\106\031\101\032\112\033" +
    "\105\034\114\035\110\036\103\037\111\040\104\041\100" +
    "\042\113\043\076\001\002\000\046\010\uffc4\012\uffc4\015" +
    "\uffc4\016\uffc4\024\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\001\002\000\004\014\131\001\002" +
    "\000\006\016\uffcd\024\uffcd\001\002\000\004\044\133\001" +
    "\002\000\004\012\134\001\002\000\006\016\uffd1\024\uffd1" +
    "\001\002\000\040\016\uffd3\024\uffd3\026\077\030\106\031" +
    "\101\032\112\033\105\034\114\035\110\036\103\037\111" +
    "\040\104\041\100\042\113\043\076\001\002\000\032\010" +
    "\uffc9\012\uffc9\015\uffc9\016\uffc9\024\uffc9\026\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\001\002\000" +
    "\014\011\073\026\057\027\067\044\074\045\064\001\002" +
    "\000\036\012\141\026\077\030\106\031\101\032\112\033" +
    "\105\034\114\035\110\036\103\037\111\040\104\041\100" +
    "\042\113\043\076\001\002\000\030\011\073\013\072\020" +
    "\061\021\070\022\071\023\065\025\060\026\057\027\067" +
    "\044\062\045\064\001\002\000\006\016\uffcf\024\143\001" +
    "\002\000\030\011\073\013\072\020\061\021\070\022\071" +
    "\023\065\025\060\026\057\027\067\044\062\045\064\001" +
    "\002\000\006\016\uffd0\024\uffd0\001\002\000\014\011\073" +
    "\026\057\027\067\044\074\045\064\001\002\000\014\011" +
    "\073\026\057\027\067\044\074\045\064\001\002\000\040" +
    "\016\uffd6\024\uffd6\026\077\030\106\031\101\032\112\033" +
    "\105\034\114\035\110\036\103\037\111\040\104\041\100" +
    "\042\113\043\076\001\002\000\036\010\151\026\077\030" +
    "\106\031\101\032\112\033\105\034\114\035\110\036\103" +
    "\037\111\040\104\041\100\042\113\043\076\001\002\000" +
    "\042\016\uffc4\017\152\024\uffc4\026\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\001\002\000\014\011\073" +
    "\026\057\027\067\044\074\045\064\001\002\000\040\016" +
    "\uffd5\024\uffd5\026\077\030\106\031\101\032\112\033\105" +
    "\034\114\035\110\036\103\037\111\040\104\041\100\042" +
    "\113\043\076\001\002\000\004\045\155\001\002\000\004" +
    "\012\156\001\002\000\006\016\uffd4\024\uffd4\001\002\000" +
    "\014\011\073\026\057\027\067\044\074\045\064\001\002" +
    "\000\036\012\161\026\077\030\106\031\101\032\112\033" +
    "\105\034\114\035\110\036\103\037\111\040\104\041\100" +
    "\042\113\043\076\001\002\000\030\011\073\013\072\020" +
    "\061\021\070\022\071\023\065\025\060\026\057\027\067" +
    "\044\062\045\064\001\002\000\006\016\uffce\024\uffce\001" +
    "\002\000\046\010\uffca\012\uffca\015\uffca\016\uffca\024\uffca" +
    "\026\uffca\030\106\031\101\032\112\033\105\034\114\035" +
    "\110\036\uffca\037\111\040\104\041\100\042\uffca\043\uffca" +
    "\001\002\000\032\011\073\013\072\014\uffd7\020\061\021" +
    "\070\022\071\023\065\025\060\026\057\027\067\044\062" +
    "\045\064\001\002\000\004\014\uffd8\001\002\000\010\007" +
    "\172\011\051\016\ufff8\001\002\000\004\016\uffeb\001\002" +
    "\000\004\016\uffea\001\002\000\004\016\uffee\001\002\000" +
    "\004\045\173\001\002\000\004\010\174\001\002\000\004" +
    "\016\ufff9\001\002\000\004\044\176\001\002\000\006\007" +
    "\172\016\ufff8\001\002\000\004\016\uffed\001\002\000\006" +
    "\002\uffe2\004\011\001\002\000\004\002\ufff1\001\002\000" +
    "\006\002\uffe2\004\011\001\002\000\004\044\210\001\002" +
    "\000\004\013\205\001\002\000\040\004\011\005\043\006" +
    "\040\011\uffef\013\uffef\014\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\025\uffef\026\uffef\027\uffef\044\uffef\045\uffef\001" +
    "\002\000\004\014\207\001\002\000\006\002\uffe1\004\uffe1" +
    "\001\002\000\004\011\211\001\002\000\006\004\026\005" +
    "\214\001\002\000\004\012\uffde\001\002\000\004\012\215" +
    "\001\002\000\004\012\uffdf\001\002\000\004\013\uffe0\001" +
    "\002\000\004\002\uffe3\001\002\000\004\002\ufff2\001\002" +
    "\000\004\004\011\001\002\000\004\012\uffe4\001\002\000" +
    "\004\016\223\001\002\000\010\004\ufff6\005\ufff6\006\ufff6" +
    "\001\002\000\010\004\011\005\010\006\005\001\002\000" +
    "\004\002\ufff5\001\002\000\004\013\227\001\002\000\040" +
    "\004\011\005\043\006\040\011\uffef\013\uffef\014\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026\uffef\027\uffef" +
    "\044\uffef\045\uffef\001\002\000\004\014\231\001\002\000" +
    "\006\002\uffe2\004\011\001\002\000\004\002\ufff4\001\002" +
    "\000\010\007\ufffe\011\ufffe\016\ufffe\001\002\000\010\007" +
    "\172\011\014\016\ufff8\001\002\000\004\016\240\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufffd\001\002\000" +
    "\010\004\011\005\010\006\005\001\002\000\004\002\ufffb" +
    "\001\002\000\004\044\243\001\002\000\006\007\172\016" +
    "\ufff8\001\002\000\004\016\245\001\002\000\010\004\011" +
    "\005\010\006\005\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\010\002\003\006\006\024\005\001\001\000" +
    "\002\001\001\000\004\006\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\012\001\001\000\002\001\001\000\014\006\017" +
    "\010\016\015\014\016\022\027\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\024\016\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\033\001\001\000\002" +
    "\001\001\000\006\006\006\024\216\001\001\000\012\003" +
    "\041\004\043\006\040\017\036\001\001\000\002\001\001" +
    "\000\004\006\174\001\001\000\002\001\001\000\010\020" +
    "\062\021\055\034\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\045\004\043\006\040\001\001\000" +
    "\002\001\001\000\004\005\047\001\001\000\002\001\001" +
    "\000\010\006\017\007\051\010\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\101\001" +
    "\001\000\004\034\135\001\001\000\004\034\134\001\001" +
    "\000\002\001\001\000\010\020\127\021\055\034\065\001" +
    "\001\000\004\034\074\001\001\000\002\001\001\000\004" +
    "\033\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\101\001\001\000\004\034\125\001\001" +
    "\000\010\022\117\023\120\034\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\101\001\001\000\006" +
    "\023\123\034\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\101\001\001\000\004" +
    "\033\101\001\001\000\004\034\137\001\001\000\004\033" +
    "\101\001\001\000\006\021\141\034\065\001\001\000\002" +
    "\001\001\000\006\021\143\034\065\001\001\000\002\001" +
    "\001\000\004\034\147\001\001\000\004\034\146\001\001" +
    "\000\004\033\101\001\001\000\004\033\101\001\001\000" +
    "\002\001\001\000\004\034\152\001\001\000\004\033\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\157\001\001\000\004\033\101\001\001" +
    "\000\006\021\161\034\065\001\001\000\002\001\001\000" +
    "\004\033\101\001\001\000\010\020\164\021\055\034\065" +
    "\001\001\000\002\001\001\000\010\005\167\031\166\032" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\176\001\001\000\002" +
    "\001\001\000\012\006\202\011\200\012\201\013\203\001" +
    "\001\000\002\001\001\000\012\006\202\011\215\012\201" +
    "\013\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\041\004\043\006\040\017\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\212\015\211\016\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\017\010\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\223\001" +
    "\001\000\006\006\006\024\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\041\004\043\006\040\017" +
    "\227\001\001\000\002\001\001\000\012\006\202\011\231" +
    "\012\201\013\203\001\001\000\002\001\001\000\004\035" +
    "\233\001\001\000\010\025\236\026\235\031\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\006\024\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\243\001\001\000\002\001\001\000" +
    "\006\006\006\024\245\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static Parser p;
  public static PrintStream ps;
  public static int currentReg = 0;
  public CodeGenerator cg = new CodeGenerator();

  Parser(Scanner s, SymbolFactory sf, PrintStream ps){
    super(s,sf);
    this.ps = ps;
  }

  public static void main(String args[]) throws Exception {
    SymbolFactory sf = new DefaultSymbolFactory();
    String destination_file;

    if (args.length >= 2)
      destination_file = args[1];
    else
      destination_file = args[0].substring(0,args[0].lastIndexOf('.')) + ".s";

    System.out.println("Writing to : " + destination_file);
    p = new Parser(new Scanner(new FileInputStream(args[0]),sf),
                               sf,
                               new PrintStream(destination_file));
    //System.out.println("modified version");
    //p.debug_parse();
    p.parse();
    p.ps.println("\t.file \""+ args[0]+"\"");
    //p.ps.println(cg.generateCode());
    p.ps.close();
  }
  

  public static String getNextRegistry(){	      
  	  String s = new String("R" + currentReg);
	  currentReg++;
	  return s;	
  }

  public void syntax_error(Symbol cur_token) { //overloads the default method
    report_error("*** Syntax Error at line "
                 + (cur_token.left+1)
                 + ", column "
                 + cur_token.right
                 + " ***",
                 null);
    p.debug_stack();
    p.debug_shift(cur_token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bin_op ::= AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bin_op ::= OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bin_op ::= MOD 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bin_op ::= DIV 
            {
              String RESULT =null;
		 RESULT = new String("  div "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_op ::= TIMES 
            {
              String RESULT =null;
		 RESULT = new String("  mul "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = new String("  sub "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_op ::= PLUS 
            {
              String RESULT =null;
		 RESULT = new String("  add "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_op ::= DIFF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bin_op ::= GEQL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bin_op ::= LEQL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bin_op ::= EQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bin_op ::= GREATER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bin_op ::= LESS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // args_list ::= expression COMMA args_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // args_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arg_sequence ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_sequence",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arg_sequence ::= args_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_sequence",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= IDENT LHOOK expression RHOOK 
            {
              ArithmeticResult RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= IDENT LPAREN arg_sequence RPAREN 
            {
              ArithmeticResult RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= NB_INT 
            {
              ArithmeticResult RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String s = Parser.getNextRegistry();
       RESULT = new ArithmeticResult(null, null, null, s);
       cg.generateArithmeticLoad(n.toString(), s, Parser.ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= IDENT 
            {
              ArithmeticResult RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String s = Parser.getNextRegistry();
       RESULT = new ArithmeticResult(null, null, null, s);
       cg.generateArithmeticLoad(i.toString(), s, Parser.ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= LPAREN expression RPAREN 
            {
              ArithmeticResult RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArithmeticResult e = (ArithmeticResult)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArithmeticResult(null, null, null, e.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= NOT expression 
            {
              ArithmeticResult RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= MINUS expression 
            {
              ArithmeticResult RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression bin_op expression 
            {
              ArithmeticResult RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArithmeticResult l = (ArithmeticResult)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArithmeticResult r = (ArithmeticResult)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArithmeticResult(l.getValue(), b, r.getValue(), l.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruction ::= LBRACKET instruct_list RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruction ::= WHILE LPAREN expression RPAREN instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruction ::= IF LPAREN expression RPAREN instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruction ::= IF LPAREN expression RPAREN instruction ELSE instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruction ::= READ_INT LPAREN IDENT RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= EXIT LPAREN NB_INT RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= IDENT LHOOK expression RHOOK EQL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruction ::= IDENT EQL expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArithmeticResult e = (ArithmeticResult)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cg.generateArithmeticResult(e, Parser.ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruct_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruct_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruct_list ::= instruction SEMI instruct_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruct_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // body ::= declarations_list instruct_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter ::= INT IDENT LHOOK NB_INT RHOOK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter ::= INT IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param_list ::= parameter COMMA param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param_list ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param_sequence ::= param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_sequence",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param_sequence ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_sequence",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // header ::= type IDENT LPAREN param_sequence RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= header LBRACKET body RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions_list ::= function functions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // types_list ::= type COMMA types_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // types_list ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // types_sequence ::= types_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types_sequence",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // types_sequence ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types_sequence",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INT 
            {
              Object RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // prototype ::= LPAREN types_sequence RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prototype",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arr_proto ::= prototype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_proto",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arr_proto ::= arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_proto",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= VOID IDENT prototype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= STATIC type IDENT arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= type IDENT arr_proto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations_list ::= declaration SEMI declarations_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_or_func_end ::= LBRACKET body RBRACKET functions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_or_func_end",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_or_func_end ::= SEMI dec_func_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_or_func_end",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // hybrid_param ::= VOID RPAREN dec_or_func_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hybrid_param",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // hybrid_param ::= param_list RPAREN LBRACKET body RBRACKET functions_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hybrid_param",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // hybrid_param ::= types_list RPAREN SEMI NT$1 dec_func_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object typeList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hybrid_param",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object typeList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

                                 parser.cg.pushInformation((ArrayList<Type>)typeList);
                                 parser.cg.declarePrototype();
                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proto_func ::= LPAREN hybrid_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proto_func",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arr ::= LHOOK NB_INT RHOOK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_end ::= proto_func 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_end",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_end ::= arr SEMI dec_func_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_end",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_func_list ::= VOID IDENT proto_func 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_func_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_func_list ::= type IDENT NT$0 dec_end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_func_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

             parser.cg.pushInformation(t);
             parser.cg.pushInformation(id);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_func_list ::= STATIC type IDENT arr SEMI dec_func_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_func_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= dec_func_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

